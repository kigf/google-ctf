/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */
package main

import (
	"log"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"text/template"
	"strconv"
)

type Port struct {
	PortName [2]uint64
	SeqNr uint64
}

func logHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("== log ==")
	io.Copy(os.Stdout, r.Body)
}

func buildSc(w http.ResponseWriter, r *http.Request) {
	q := r.URL.Query()
	p1, _ := strconv.ParseUint(q["p1"][0], 16, 64)
	p2, _ := strconv.ParseUint(q["p2"][0], 16, 64)
	seqNr, _ := strconv.ParseUint(q["seqnr"][0], 16, 64)

	tmpl := template.Must(template.ParseFiles("sc.asm"))

	tmpFile, _ := ioutil.TempFile("", "ctf_mojo_sc_")
	defer os.Remove(tmpFile.Name())

	port := Port{PortName: [2]uint64{p1, p2}, SeqNr: seqNr}
	tmpl.Execute(tmpFile, port)

	outFile := tmpFile.Name() + ".bin"
	cmd := exec.Command("nasm", tmpFile.Name(), "-o", outFile)
	cmd.Stderr = os.Stderr
	err := cmd.Run()
	if err != nil {
		log.Printf("Command finished with error: %v", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer os.Remove(outFile)

	sc, err := ioutil.ReadFile(outFile)
	if err != nil {
		log.Printf("Couldn't read sc file: %v", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	w.Write(sc)
}

func main() {
	fs := http.FileServer(http.Dir("."))
	http.Handle("/", fs)

	http.HandleFunc("/sc", buildSc)
	http.HandleFunc("/log", logHandler)

	log.Println("Listening...")
	http.ListenAndServe(":1337", nil)
}
